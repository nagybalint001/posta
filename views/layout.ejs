<!DOCTYPE html>
<html>
    <head>
        <title><%= typeof title == 'undefined' ? 'Post IT' : (title + ' - Post IT') %></title>

        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">

        <!-- Viewport mobile tag for sensible mobile support -->
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <meta name="theme-color" content="#1e2327"/>

        
        <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Roboto:400,100,300,500">
        
        <!--
            Stylesheets and Preprocessors
            ==============================

            You can always bring in CSS files manually with `<link>` tags, or asynchronously
            using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
            of Sails' conventional asset pipeline (boilerplate Gruntfile).

            By default, stylesheets from your `assets/styles` folder are included
            here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
            are supported. In production, your styles will be minified and concatenated into
            a single file.

            To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
            For example, here are a few things you could do:

                + Change the order of your CSS files
                + Import stylesheets from other directories
                + Use a different or additional preprocessor, like SASS, SCSS or Stylus
        -->
        <link rel="stylesheet" href="/fonts/font-awesome/css/font-awesome.min.css">
        <!--STYLES-->
        <link rel="stylesheet" href="/styles/bootstrap/bootstrap-grid.min.css">
        <link rel="stylesheet" href="/styles/bootstrap/bootstrap-reboot.min.css">
        <link rel="stylesheet" href="/styles/bootstrap/bootstrap.min.css">
        <link rel="stylesheet" href="/styles/importer.css">
        <!--STYLES END-->
        <%- stylesheets %>

        <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
        <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
        <!--[if lt IE 9]>
            <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
            <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
        <![endif]-->

        <!-- Favicon and touch icons -->
        <link rel="shortcut icon" href="/images/ico/favicon.png">
        <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/images/ico/icon-144.png">
        <link rel="apple-touch-icon-precomposed" sizes="114x114" href="/images/ico/icon-114.png">
        <link rel="apple-touch-icon-precomposed" sizes="72x72" href="/images/ico/icon-72.png">
        <link rel="apple-touch-icon-precomposed" href="/images/ico/icon-57.png">

        <!-- Full screen on mobile device from home screen link -->
        <!-- https://developers.chrome.com/multidevice/android/installtohomescreen -->
        <!-- https://developer.mozilla.org/en-US/docs/Web/Manifest -->
        <link rel="manifest" href="/manifest.json">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="mobile-web-app-capable" content="yes">

    </head>
  <body>
    <%- body %>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.min.js"></script>
    <script src="/js/dependencies/popper.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/script.js"></script>
    <!--SCRIPTS END-->
    <%- scripts %>
  </body>
</html>
